version: "2.4"
services:
  db:
    image: postgres:13.2-alpine
    ports:
      - "5432:5432"
    env_file:
      - postgres/env.docker
    healthcheck:
      test: "pg_isready -U deploy -d openledger"
    volumes:
      - api-postgres:/var/lib/postgresql/data

  thumbs:
    image: willnorris/imageproxy
    ports:
      - "8222:8222"
    command: ["-addr", "0.0.0.0:8222"]

  upstream_db:
    image: postgres:13.2-alpine
    ports:
      - "5433:5432"
    volumes:
      - catalog-postgres:/var/lib/postgresql/data
      - ./sample_data:/sample_data
    env_file:
      - postgres/env.docker
    healthcheck:
      test: "pg_isready -U deploy -d openledger"

  cache:
    image: redis:4.0.10
    ports:
      - "6379:6379"

  es:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.0
    ports:
      - "9200:9200"
    environment:
      # disable XPack
      # https://www.elastic.co/guide/en/elasticsearch/reference/5.3/docker.html#_security_note
      - xpack.security.enabled=false
      - discovery.type=single-node
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -si -XGET 'localhost:9200/_cluster/health?pretty' | grep -qE 'yellow|green'",
        ]
      interval: 10s
      timeout: 60s
      retries: 10
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    # Memory limit for ES, as it tends to be a memory hoarder
    # Set this value to an empty string to remove the limit
    # https://docs.docker.com/compose/compose-file/compose-file-v2/#cpu-and-other-resources
    mem_limit: ${ES_MEM_LIMIT:-4294967296} # 4 GiB in bytes
    volumes:
      - es-data:/usr/share/elasticsearch/data

  web:
    build: ./api/
    image: api
    volumes:
      - ./api:/api
    ports:
      - "8000:8000"
      - "3000:3000"
    depends_on:
      - db
      - es
      - cache
    env_file:
      - api/env.docker
    stdin_open: true
    tty: true

  ingestion_server:
    build: ./ingestion_server/
    image: ingestion_server
    command: gunicorn -c ./gunicorn.conf.py
    ports:
      - "8001:8001"
    depends_on:
      - db
      - es
      - indexer_worker
    volumes:
      - ./ingestion_server:/ingestion_server
    env_file:
      - ingestion_server/env.docker
    stdin_open: true
    tty: true

  indexer_worker:
    build: ./ingestion_server/
    image: ingestion_server
    command: gunicorn -c ./gunicorn_worker.conf.py
    ports:
      - "8002:8002"
    depends_on:
      - db
      - es
    volumes:
      - ./ingestion_server:/ingestion_server
    env_file:
      - ingestion_server/env.docker
    stdin_open: true
    tty: true

  analytics:
    build: ./analytics/
    image: analytics
    ports:
      - "8090:8090"
    volumes:
      - ./analytics:/analytics
    env_file:
      - ./analytics/env.docker

volumes:
  api-postgres:
  catalog-postgres:
  es-data:

name: PR Safety Check

on:
  push:
    branches:
      - main
    paths:
      - '**/migrations/**'

jobs:
  dispatch-migration-checks:
    name: Dispatch CI check for pending PRs adding migrations
    if: github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}
          script: |
            const { data: openPulls } = await github.rest.pulls.list({
              owner: 'WordPress',
              repo: 'openverse-api',
              base: 'main'
            })

            const pullsWithMigrations = (await Promise.all(openPulls.map(async (pull) => {
              const { data: diff } = await github.request(pull.diff_url)
              if (diff.includes("api/catalog/api/migrations")) {
                return pull
              }
              return null
            }))).filter(Boolean)

            const runs = await Promise.all(pullsWithMigrations.map(async (pull) => {
              const { data: review } = await github.rest.pulls.submitReview({
                owner: 'WordPress',
                repo: 'openverse-api',
                pull_number: pull.id,
                body: 'Due to this PR having migrations, we are running a migration safety check on it. This review will automatically be cleared if the PR is determined to be safe.'
                event: 'REQUEST_CHANGES'
              })

              const { data: run } = await github.rest.actions.createWorkflowDispatch({
                owner: 'WordPress',
                repo: 'openverse-api',
                workflow_id: 'ci_cd.yml',
                ref: pull.head.ref,
                inputs: {
                  ref: pull.head.ref,
                  rebase: true
                }
              });

              let status, conclusion;
              while (status !== 'completed') {
                // Check every three seconds on the workflow status
                await new Promise(r => setTimeout(r, 3000))
                ({ data: { status, conclusion } } = await github.rest.actions.getWorkflowRun({
                  owner: 'WordPress',
                  repo: 'openverse-api',
                  run_id: run.,
                }));
              }

              if (conclusion !== 'failure') {
                await github.rest.pulls.dismissReview({
                  owner: 'WordPress',
                  repo: 'openverse-api',
                  pull_number: pull.id,
                  review_id: review.id,
                  message: 'PR Safety Check passed'
                });
              } else {
                await github.rest.pulls.updateReviewComment({
                  owner: 'WordPress',
                  repo: 'openverse-api',
                  comment_id: review.comment_id,
                  body: 'PR Safety Check failed! Please rebase this PR against main and ensure that migrations apply cleanly.'
                });
              }
            }));
